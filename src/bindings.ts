
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async searchKanji(char: string) : Promise<Result<KanjiPayload | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("search_kanji", { char }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getHeisigKanjis() : Promise<KanjiPayload[]> {
    return await TAURI_INVOKE("get_heisig_kanjis");
},
async searchKanjis(chars: string[]) : Promise<Result<KanjiPayload[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("search_kanjis", { chars }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getWordDictEntry(word: string) : Promise<Result<MyEntryDisplay | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_word_dict_entry", { word }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getWordCandidates(word: string) : Promise<Result<MyEntryDisplay[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_word_candidates", { word }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getWords() : Promise<Result<Word[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_words") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async addWord(payload: WordCreatePayload) : Promise<Result<Word, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("add_word", { payload }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async hasWord(word: string) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("has_word", { word }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type KanjiPayload = { id: string; kanji: string; pronunciation: string; primitives: string[]; words: string[] }
export type KanjiReading = { reading: string }
export type MyEntryDisplay = { word: string; reading: string; translations: string }
export type Word = { id: string; word: string; meaning: string; kanji_readings: KanjiReading[] }
export type WordCreatePayload = { word: string; meaning: string; kanji_readings: KanjiReading[] }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
